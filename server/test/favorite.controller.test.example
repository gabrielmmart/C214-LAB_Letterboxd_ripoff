const responseHandler = require("../src/handlers/response.handler.js");
const favoriteModel = require("../src/models/favorite.model.js");
const favoriteController = require("../src/controllers/favorite.controller.js");
const mongoose = require('mongoose');

jest.mock("../src/models/favorite.model.js");
jest.mock("../src/handlers/response.handler.js");

describe("Favorite Controller", () => {
  let req;
  let res;

  beforeEach(() => {
    req = {
      user: { id: new mongoose.Types.ObjectId() },
      params: {},
      body: {
        mediaId: "123" // Add a valid mediaId value here
      },
    };
    res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe("addFavorite", () => {
    test("should add favorite when not already favorited", async () => {
      const mockFavorite = {
        _id: 123,
        user: req.user.id,
        mediaId: req.body.mediaId,
      };

      favoriteModel.findOne = jest.fn().mockResolvedValue(null);
      favoriteModel.prototype.save = jest.fn().mockResolvedValue(mockFavorite);

      await favoriteController.addFavorite(req, res);

      expect(favoriteModel.findOne).toHaveBeenCalledWith({
        user: req.user.id,
        mediaId: req.body.mediaId,
      });
      expect(favoriteModel).toHaveBeenCalledWith({
        ...req.body,
        user: req.user.id,
      });
      expect(favoriteModel.prototype.save).toHaveBeenCalled();
      expect(responseHandler.created).toHaveBeenCalledWith(res, mockFavorite);
    });
  });
});
